
                Baska bir Class’dan variable veya method kullanmak
                istersek 3 yontem kullanabiliriz
                A- inheritance (Miras)
                kullandigimiz Class’i extends anahtar kelimesi (key word)
                ile istedigimiz Class’in child’i yapabiliriz.

                Bu durumda object olusturmaya gerek kalmadan Parent
                class’a ulasabilir ve oradaki variable ve methodlari
                kullanabiliriz. (Test Base gibi)

                Inheritance ile variable ve method kullanirken static
                keyword’e dikkat etmek gerekir. Static olarak
                tanimlanmis bir variable veya method static olmayan
                method icinden kullanilamaz.
                B- Object olusturarak

                ornek: Servis class’indan Okul class’ina ulasmak

                istiyorsak

                Bir class’dan obje olusturarak istedigimiz class’a
                ulasabilir ve o class’daki variable ve methodlari
                object’imizi araciligiyla kullanabiliriz

                - Okul class’indan bir obje olustururuz
                - obje uzerinden variable veya
                method’lara ulasabiliriz

                C- Static Class Uyeleri : Eger kullanacagimiz variable
                veya method static ise object olusturmadan direk
                class ismi ile variable veya method’a ulasabiliriz.

                Bir sirkette test framework’u olusturdugumuzda
                kullanici adi, sifresi, gidilecek web adresi gibi test
                datalari tum testler icin gecerlidir. Ayrica surekli
                kullanmamiz gereken variable ve method’lar olacaktir.

                Daha kullanisli bir Framework olusturmak icin temel
                hedefimiz, tekrar tekrar yaptigimiz islemleri ve
                testlerimizde kullandigimiz Test Data’larini onceden
                hazirladigimiz dosyalarda tutmaktir.
                ➢ Bu sekilde testlerimizde ihtiyac duydugumuzda bu
                verilere kolayca ulasabilir veya test datalari ile ilgili
                bir degisiklik yapmamiz gerektiginde sadece kaynak
                dosyadan bir degeri degistirerek tum test case’leri
                guncellemis oluruz.


                POM çok popüler bir Framework Design Pattern ‘dir.
                ➢ Test suitlerimizde çok fazla testimiz olduğunda, test
                caseleri ve kodları korumak daha karmaşık hale gelir.
                Bu nedenle,
                sürdürülebilir(maintainable),
                yeniden kullanılabilir(reusable),
                daha hızlı(faster),
                anlaşılabilir( understandable)
                daha iyi bir framework dizaynina ihtiyacımız vardir.
                ➢ Page object model ile, sayfaya özgü elementleri veya methodlari page class icinde tutar, ve bunları
                gerçek test classlarından uzak tutarız.
                ➢ POM ile ihtiyacimiz olan class uyelerini sadece bir kez create edip birden çok kez kullanabiliriz.


                Framework un verimliliğini artırmak için core Java ve
                Selenium konseptini kullanarak temel olarak page classları
                ve test classları oluşturacağız.
                ➢ Tüm şirketler page object model dizaynini kullanmaz, ancak
                herkes bunu bilir ve daha da popüler hale gelmektedir.
                ➢ Daha iyi bir tasarım, testin yürütme süresini daha hızlı
                hale getirir.

                ➢ Page Object Design daha bağımsız test senaryoları oluşturmamıza yardımcı olur, böylece test komut
                dosyalarında(script) hata ayıklamak daha kolay olacaktır.
                ➢ Bir uygulamanın(application) işlevselliği değiştiğinde, kodu
                düzeltmek için framework kontrol edilmesini ve gerekli
                duzeltmelerin yapilmasini kolaylastirir.


                Page Object Model temelde 3 package icerir

                ➢ Tests : Sadece testleri execute etmek icin gerekli
                adimlari yazacagimiz class’lar icerir. Hicbir data girisi
                yapmayacagiz

                ➢ Pages : Test yapacagimiz sayfalardaki Web
                Elementlerini locate etmek ve temel methodlari
                olusturmak icin kullanilir.

                ➢ Utilities : Driver,TestBase ve ConfigurationReader
                class’larini icerir


                Yaptiginiz tum testlerde oncelikle register olmaniz gerekecektir.

                Driver.get(“https://www. hotelmycamp.com/”)
                userNameTexBox.sendKeys(“mehmet”)
                passwordTexBox.sendKeys(“12345”)
                logInButonu.click()

                Her test’n basinda yeniden locate’leri yapmaniz, her test icin yeniden test datalarini girmeniz gerekir.
                Kullanici adi ve sifresi degistiginde ise, var olan yuzlerce test method’unu gozden gecirmeniz
                kullanici adi ve sifresini duzeltmeniz gerekir

                Temel Hedefimiz: Test methodlarimizda kullanacagimiz WebDriver driver’i utilities altindaki
                Driver Class’inda olusturmak ve testlerimizde bu class ismi uzerinden driver’a ulasip olusturma,
                kullanma ve kapatma islemlerini yapmak.

                Test Class(driver->Driver.getDriver( ) )

                Su anki haliyle TestBase Class’imizla ayni olacak ama inheritance kullanmak yerine static
                method’lar ile driver’i kullanacagiz. Driver class’ini daha sonra tum browser’lar ile calisacak hale
                getirecegiz

                Bir page class’i olusturdugumuzda ilk isimiz bir
                constructor olusturup, pageFactory class’indan
                initElements( ) method’unu kullanmak olmalidir.

                1. PageFactory, page object dizayni icin bir önemli
                classtır.
                2. Page objelerini instantiate(ilk deger atama) için
                page classlarında PageFactory kullanıyoruz.
                3. PageFactory.initElements(driver,this);
                this => page instance
                driver => bizim gonderecegimiz driver
                4. Aslinda PageFactory class’ina, elementlere ilk
                degeri atayan initElements( ) metodunu
                kullanmak icin ihtiyacimiz var


               Page class’larinda webElementleri locate etmek icin
               simdiye kadar kullandigimiz
               driver.findElement( ) method’unu kullanmayacagiz.
                @FindBy notasyonu test class’larinda
                kullanacagimiz Web Elementlerini Page
                sayfasinda locate etmek icin kullanilir

                3. Bu islemi yaptiktan sonra hangi test
                methodumuzda bu web elemente ihtiyac duyarsak
                page class’indan uretecegimiz obje uzerinden
                rahatlikla kullanabiliriz
                2. Bunun icin kullanacagimiz Web Elementini public
                olarak olusturmali, sonra da @FindBy notasyonu
                ile locate etmeliyiz
                Page